// src/services/customerService.js

import axios from './axiosConfig';

const customerService = {
  // ‚úÖ T√ºm m√º≈üterileri getir (ƒ∞Yƒ∞LE≈ûTƒ∞Rƒ∞LMƒ∞≈û)
  getAllCustomers: async () => {
    try {
      const response = await axios.get('/customers');
      
      console.log('üîç Raw axios response:', response);
      console.log('üîç Response data:', response.data);
      
      // Backend'den gelen data yapƒ±sƒ±
      let customers = [];
      
      // Format 1: { data: [...] }
      if (response.data && Array.isArray(response.data.data)) {
        customers = response.data.data;
      }
      // Format 2: { data: { customers: [...] } }
      else if (response.data && response.data.data && Array.isArray(response.data.data.customers)) {
        customers = response.data.data.customers;
      }
      // Format 3: Direct array
      else if (Array.isArray(response.data)) {
        customers = response.data;
      }
      // Format 4: { success: true, data: [...] }
      else if (response.data && response.data.success && Array.isArray(response.data.data)) {
        customers = response.data.data;
      }
      
      console.log('‚úÖ Parsed customers:', customers.length, 'items');
      
      return {
        success: true,
        data: customers
      };
    } catch (error) {
      console.error('‚ùå getAllCustomers error:', error);
      return {
        success: false,
        data: [],
        error: error.response?.data?.message || 'M√º≈üteriler getirilemedi'
      };
    }
  },

  // ID ile m√º≈üteri getir
  getCustomerById: async (id) => {
    try {
      const response = await axios.get(`/customers/${id}`);
      return {
        success: true,
        data: response.data.data || response.data
      };
    } catch (error) {
      console.error('‚ùå getCustomerById error:', error);
      return {
        success: false,
        data: null,
        error: error.response?.data?.message || 'M√º≈üteri bulunamadƒ±'
      };
    }
  },

  // Yeni m√º≈üteri olu≈ütur
  createCustomer: async (customerData) => {
    try {
      const response = await axios.post('/customers', customerData);
      return {
        success: true,
        data: response.data.data || response.data
      };
    } catch (error) {
      console.error('‚ùå createCustomer error:', error);
      return {
        success: false,
        data: null,
        error: error.response?.data?.message || 'M√º≈üteri olu≈üturulamadƒ±'
      };
    }
  },

  // M√º≈üteri g√ºncelle
  updateCustomer: async (id, customerData) => {
    try {
      const response = await axios.patch(`/customers/${id}`, customerData);
      return {
        success: true,
        data: response.data.data || response.data
      };
    } catch (error) {
      console.error('‚ùå updateCustomer error:', error);
      return {
        success: false,
        data: null,
        error: error.response?.data?.message || 'M√º≈üteri g√ºncellenemedi'
      };
    }
  },

  // Tam g√ºncelleme (PUT - contacts'larƒ± replace eder)
  fullUpdateCustomer: async (id, customerData) => {
    try {
      const response = await axios.put(`/customers/${id}`, customerData);
      return {
        success: true,
        data: response.data.data || response.data
      };
    } catch (error) {
      console.error('‚ùå fullUpdateCustomer error:', error);
      return {
        success: false,
        data: null,
        error: error.response?.data?.message || 'M√º≈üteri g√ºncellenemedi'
      };
    }
  },

  // M√º≈üteri sil (soft delete)
  deleteCustomer: async (id) => {
    try {
      const response = await axios.delete(`/customers/${id}`);
      return {
        success: true,
        data: response.data
      };
    } catch (error) {
      console.error('‚ùå deleteCustomer error:', error);
      return {
        success: false,
        error: error.response?.data?.message || 'M√º≈üteri silinemedi'
      };
    }
  },

  // Silinmi≈ü m√º≈üterileri listele
  getAllDeletedCustomers: async () => {
    try {
      const response = await axios.get('/customers/deleted');
      
      let customers = [];
      if (Array.isArray(response.data.data)) {
        customers = response.data.data;
      } else if (Array.isArray(response.data)) {
        customers = response.data;
      }
      
      return {
        success: true,
        data: customers
      };
    } catch (error) {
      console.error('‚ùå getAllDeletedCustomers error:', error);
      return {
        success: false,
        data: [],
        error: error.response?.data?.message || 'Silinmi≈ü m√º≈üteriler getirilemedi'
      };
    }
  },

  // M√º≈üteriyi geri y√ºkle
  restoreCustomer: async (id) => {
    try {
      const response = await axios.put(`/customers/${id}/restore`);
      return {
        success: true,
        data: response.data
      };
    } catch (error) {
      console.error('‚ùå restoreCustomer error:', error);
      return {
        success: false,
        error: error.response?.data?.message || 'M√º≈üteri geri y√ºklenemedi'
      };
    }
  },

  // M√º≈üteriyi kalƒ±cƒ± sil (hard delete)
  hardDeleteCustomer: async (id) => {
    try {
      const response = await axios.delete(`/customers/${id}/hard`);
      return {
        success: true,
        data: response.data
      };
    } catch (error) {
      console.error('‚ùå hardDeleteCustomer error:', error);
      return {
        success: false,
        error: error.response?.data?.message || 'M√º≈üteri kalƒ±cƒ± olarak silinemedi'
      };
    }
  },

  // Tek media y√ºkle
  uploadMedia: async (customerId, file, mediaType) => {
    try {
      const formData = new FormData();
      formData.append('file', file);
      formData.append('mediaType', mediaType);

      const response = await axios.post(
        `/customers/${customerId}/media/upload`,
        formData,
        { headers: { 'Content-Type': 'multipart/form-data' } }
      );
      return {
        success: true,
        data: response.data.data || response.data
      };
    } catch (error) {
      console.error('‚ùå uploadMedia error:', error);
      return {
        success: false,
        error: error.response?.data?.message || 'Media y√ºklenemedi'
      };
    }
  },

  // √áoklu media y√ºkle
  uploadMultipleMedia: async (customerId, files, mediaType) => {
    try {
      const formData = new FormData();
      files.forEach(file => formData.append('files', file));
      formData.append('mediaType', mediaType);

      const response = await axios.post(
        `/customers/${customerId}/media/upload-batch`,
        formData,
        { headers: { 'Content-Type': 'multipart/form-data' } }
      );
      return {
        success: true,
        data: response.data.data || response.data
      };
    } catch (error) {
      console.error('‚ùå uploadMultipleMedia error:', error);
      return {
        success: false,
        error: error.response?.data?.message || 'Medyalar y√ºklenemedi'
      };
    }
  },

  // Media sil
  deleteMedia: async (customerId, mediaId) => {
    try {
      const response = await axios.delete(`/customers/${customerId}/media/${mediaId}`);
      return {
        success: true,
        data: response.data
      };
    } catch (error) {
      console.error('‚ùå deleteMedia error:', error);
      return {
        success: false,
        error: error.response?.data?.message || 'Media silinemedi'
      };
    }
  },

  // Media listele
  getCustomerMedia: async (customerId) => {
    try {
      const response = await axios.get(`/customers/${customerId}/media`);
      
      let media = [];
      if (Array.isArray(response.data.data)) {
        media = response.data.data;
      } else if (Array.isArray(response.data)) {
        media = response.data;
      }
      
      return {
        success: true,
        data: media
      };
    } catch (error) {
      console.error('‚ùå getCustomerMedia error:', error);
      return {
        success: false,
        data: [],
        error: error.response?.data?.message || 'Medyalar getirilemedi'
      };
    }
  },

  // Se√ßili medyalarƒ± ZIP olarak indir
  downloadMediaAsZip: async (customerId, mediaIds) => {
    try {
      const response = await axios.post(
        `/customers/${customerId}/media/download-zip`,
        mediaIds,
        {
          responseType: 'blob'
        }
      );
      return response;
    } catch (error) {
      console.error('‚ùå downloadMediaAsZip error:', error);
      throw error;
    }
  },

  // ========== B√ñL√úM BAZLI G√úNCELLEME ==========

  updateBasicInfo: async (customerId, data) => {
    try {
      const response = await axios.put(`/customers/${customerId}/update/basic-info`, data);
      return {
        success: true,
        data: response.data.data || response.data
      };
    } catch (error) {
      console.error('‚ùå updateBasicInfo error:', error);
      return {
        success: false,
        error: error.response?.data?.message || 'Temel bilgiler g√ºncellenemedi'
      };
    }
  },

  updateContacts: async (customerId, contacts) => {
    try {
      const response = await axios.put(`/customers/${customerId}/update/contacts`, contacts);
      return {
        success: true,
        data: response.data.data || response.data
      };
    } catch (error) {
      console.error('‚ùå updateContacts error:', error);
      return {
        success: false,
        error: error.response?.data?.message || 'ƒ∞leti≈üim bilgileri g√ºncellenemedi'
      };
    }
  },

  updateSocialMedia: async (customerId, socialMedia) => {
    try {
      const response = await axios.put(`/customers/${customerId}/update/social-media`, socialMedia);
      return {
        success: true,
        data: response.data.data || response.data
      };
    } catch (error) {
      console.error('‚ùå updateSocialMedia error:', error);
      return {
        success: false,
        error: error.response?.data?.message || 'Sosyal medya bilgileri g√ºncellenemedi'
      };
    }
  },

  updateTargetAudience: async (customerId, targetAudience) => {
    try {
      const response = await axios.put(`/customers/${customerId}/update/target-audience`, targetAudience);
      return {
        success: true,
        data: response.data.data || response.data
      };
    } catch (error) {
      console.error('‚ùå updateTargetAudience error:', error);
      return {
        success: false,
        error: error.response?.data?.message || 'Hedef kitle bilgileri g√ºncellenemedi'
      };
    }
  },

  updateSeo: async (customerId, seo) => {
    try {
      const response = await axios.put(`/customers/${customerId}/update/seo`, seo);
      return {
        success: true,
        data: response.data.data || response.data
      };
    } catch (error) {
      console.error('‚ùå updateSeo error:', error);
      return {
        success: false,
        error: error.response?.data?.message || 'SEO bilgileri g√ºncellenemedi'
      };
    }
  },

  updateApiKeys: async (customerId, apiKeys) => {
    try {
      const response = await axios.put(`/customers/${customerId}/update/api-keys`, apiKeys);
      return {
        success: true,
        data: response.data.data || response.data
      };
    } catch (error) {
      console.error('‚ùå updateApiKeys error:', error);
      return {
        success: false,
        error: error.response?.data?.message || 'API anahtarlarƒ± g√ºncellenemedi'
      };
    }
  }
};

export default customerService;